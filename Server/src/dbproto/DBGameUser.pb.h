// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBGameUser.proto

#ifndef PROTOBUF_DBGameUser_2eproto__INCLUDED
#define PROTOBUF_DBGameUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace UserDB {
class GameUserLogon;
class GameUserLogonDefaultTypeInternal;
extern GameUserLogonDefaultTypeInternal _GameUserLogon_default_instance_;
}  // namespace UserDB

namespace UserDB {

namespace protobuf_DBGameUser_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_DBGameUser_2eproto

// ===================================================================

class GameUserLogon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserDB.GameUserLogon) */ {
 public:
  GameUserLogon();
  virtual ~GameUserLogon();

  GameUserLogon(const GameUserLogon& from);

  inline GameUserLogon& operator=(const GameUserLogon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameUserLogon(GameUserLogon&& from) noexcept
    : GameUserLogon() {
    *this = ::std::move(from);
  }

  inline GameUserLogon& operator=(GameUserLogon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameUserLogon& default_instance();

  static inline const GameUserLogon* internal_default_instance() {
    return reinterpret_cast<const GameUserLogon*>(
               &_GameUserLogon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GameUserLogon* other);
  friend void swap(GameUserLogon& a, GameUserLogon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameUserLogon* New() const PROTOBUF_FINAL { return New(NULL); }

  GameUserLogon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameUserLogon& from);
  void MergeFrom(const GameUserLogon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameUserLogon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 uid = 3;
  void clear_uid();
  static const int kUidFieldNumber = 3;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // uint64 login_time = 5;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 5;
  ::google::protobuf::uint64 login_time() const;
  void set_login_time(::google::protobuf::uint64 value);

  // uint64 logout_time = 6;
  void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 6;
  ::google::protobuf::uint64 logout_time() const;
  void set_logout_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:UserDB.GameUserLogon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 login_time_;
  ::google::protobuf::uint64 logout_time_;
  mutable int _cached_size_;
  friend struct protobuf_DBGameUser_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameUserLogon

// string account = 1;
inline void GameUserLogon::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameUserLogon::account() const {
  // @@protoc_insertion_point(field_get:UserDB.GameUserLogon.account)
  return account_.GetNoArena();
}
inline void GameUserLogon::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserDB.GameUserLogon.account)
}
#if LANG_CXX11
inline void GameUserLogon::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserDB.GameUserLogon.account)
}
#endif
inline void GameUserLogon::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserDB.GameUserLogon.account)
}
inline void GameUserLogon::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserDB.GameUserLogon.account)
}
inline ::std::string* GameUserLogon::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:UserDB.GameUserLogon.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameUserLogon::release_account() {
  // @@protoc_insertion_point(field_release:UserDB.GameUserLogon.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameUserLogon::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:UserDB.GameUserLogon.account)
}

// string passwd = 2;
inline void GameUserLogon::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameUserLogon::passwd() const {
  // @@protoc_insertion_point(field_get:UserDB.GameUserLogon.passwd)
  return passwd_.GetNoArena();
}
inline void GameUserLogon::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserDB.GameUserLogon.passwd)
}
#if LANG_CXX11
inline void GameUserLogon::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserDB.GameUserLogon.passwd)
}
#endif
inline void GameUserLogon::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserDB.GameUserLogon.passwd)
}
inline void GameUserLogon::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserDB.GameUserLogon.passwd)
}
inline ::std::string* GameUserLogon::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:UserDB.GameUserLogon.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameUserLogon::release_passwd() {
  // @@protoc_insertion_point(field_release:UserDB.GameUserLogon.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameUserLogon::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:UserDB.GameUserLogon.passwd)
}

// uint64 uid = 3;
inline void GameUserLogon::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameUserLogon::uid() const {
  // @@protoc_insertion_point(field_get:UserDB.GameUserLogon.uid)
  return uid_;
}
inline void GameUserLogon::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:UserDB.GameUserLogon.uid)
}

// string ip = 4;
inline void GameUserLogon::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameUserLogon::ip() const {
  // @@protoc_insertion_point(field_get:UserDB.GameUserLogon.ip)
  return ip_.GetNoArena();
}
inline void GameUserLogon::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserDB.GameUserLogon.ip)
}
#if LANG_CXX11
inline void GameUserLogon::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserDB.GameUserLogon.ip)
}
#endif
inline void GameUserLogon::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserDB.GameUserLogon.ip)
}
inline void GameUserLogon::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserDB.GameUserLogon.ip)
}
inline ::std::string* GameUserLogon::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:UserDB.GameUserLogon.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameUserLogon::release_ip() {
  // @@protoc_insertion_point(field_release:UserDB.GameUserLogon.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameUserLogon::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:UserDB.GameUserLogon.ip)
}

// uint64 login_time = 5;
inline void GameUserLogon::clear_login_time() {
  login_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameUserLogon::login_time() const {
  // @@protoc_insertion_point(field_get:UserDB.GameUserLogon.login_time)
  return login_time_;
}
inline void GameUserLogon::set_login_time(::google::protobuf::uint64 value) {
  
  login_time_ = value;
  // @@protoc_insertion_point(field_set:UserDB.GameUserLogon.login_time)
}

// uint64 logout_time = 6;
inline void GameUserLogon::clear_logout_time() {
  logout_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameUserLogon::logout_time() const {
  // @@protoc_insertion_point(field_get:UserDB.GameUserLogon.logout_time)
  return logout_time_;
}
inline void GameUserLogon::set_logout_time(::google::protobuf::uint64 value) {
  
  logout_time_ = value;
  // @@protoc_insertion_point(field_set:UserDB.GameUserLogon.logout_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace UserDB

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBGameUser_2eproto__INCLUDED
